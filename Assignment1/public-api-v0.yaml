openapi: 3.0.0
info:
  description: API to integrate with the Moneyfarm wealth management platform
  version: "0.1"
  title: Moneyfarm API
  contact:
    email: api-support@moneyfarm.com
servers:
  - description: Local Mocking
    url: http://localhost:8080
tags:
  - name: portfolio
  - name: user
  - name: funds
security:
  - bearerAuth: []
paths:
  /user:
    post:
      operationId: createUser
      security: []
      tags:
        - user
      description: Create the user, this request does not require authentication only for the sake of the exercise
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: email@example.com
      responses:
        '201':
          description: The details of the created user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: c3c0d314-e4f8-4aae-8af9-faa71382f2fb
                  email:
                    type: string
                    format: email
                    example: email@example.com
        '400':
          $ref: '#/components/responses/bad-request'
  /portfolio:
    post:
      operationId: createPortfolio
      tags:
        - portfolio
      description: Create a user portfolio
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Portfolio 1
                riskLevel:
                  type: number
                  minimum: 1
                  maximum: 10
      responses:
        '201':
          description: The details of the created portfolio.
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: Portfolio 1
                  riskLevel:
                    type: number
                    minimum: 1
                    maximum: 10
                  id:
                    type: string
                    format: uuid
                    example: c3c0d314-e4f8-4aae-8af9-faa71382f2fb
                  totalAmount:
                    type: number
                    example: 0.0
        '400':
          $ref: '#/components/responses/bad-request'
    get:
      operationId: getPortfolios
      tags:
        - portfolio
      description: Get the list of available portfolios
      responses:
        '201':
          description: The available list of portfolios.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: Portfolio 1
                    riskLevel:
                      type: number
                      minimum: 1
                      maximum: 10
                    id:
                      type: string
                      format: uuid
                      example: c3c0d314-e4f8-4aae-8af9-faa71382f2fb
                    totalAmount:
                      type: number
                      example: 0.0
        '400':
          $ref: '#/components/responses/bad-request'
  /portfolio/{id}/add-funds:
    post:
      operationId: addFunds
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Portfolio UUID 
      tags:
        - portfolio
      description: Add funds to an existing portfolio
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  example: 1000.56
                  minimum: 100
      responses:
        '200':
          description: The details of the created portfolio.
        '400':
          $ref: '#/components/responses/bad-request'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    bad-request:
      description: The server cannot or will not process the request due to something that is perceived to be a client error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example: 
            type: "https://api.moneyfarm.com/errors/bad-request"
            title: "The request is malformed"
            detail: "Object is missing required member 'xxxxxx'"
    not-found:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example: 
            type: "https://api.moneyfarm.com/errors/not-found"
            title: "The requested resource cannot be found."
    unauthorised:
      description: Authorisation information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example: 
            type: "https://api.moneyfarm.com/errors/invalid-credentials"
            title: "The requester credentials are invalid."
  schemas:
    error:
      type: object
      properties:
        type:
          type: string
          description: A URI reference [RFC3986] that identifies the problem type.
        title:
          type: string
          description: A short, human-readable summary of the problem type.
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
      required:
        - type
        - title